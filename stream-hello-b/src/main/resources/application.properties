server.port=3005
spring.application.name=stream-hello-b

##目前版本的Spring Cloud Stream为主流的消息中间件产品RabbitMQ和Kafka提供了默认的Binder实现，对RabbitMQ默认的自动化配置
##可以进行手动配置 start 或者不配置也没问题----------可注释
##spring.cloud.stream.bindings.input.destination 设置的应用程序从哪个消息代理中的哪个目标（destination）接收输入消息 ，
##与INPUT = "input" 表达意图一致
##默认情况下，当生产者发出一条消息到绑定通道上，这条消息会产生多个副本被每个消费者实例接收和处理，但我们希望生产者产生的消息只被其中一个实例消费，
##这个时候我们需要为这些消费者设置消费组来实现这样的功能，只需要在服务消费者端设置spring.cloud.stream.bindings.input.group属性即可
spring.cloud.stream.bindings.input.group=consumer-001
spring.cloud.stream.bindings.input.destination=raw-sensor-data
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=alice2
spring.rabbitmq.password=alice
##可以进行手动配置 end ----------- -----------------可注释

####单一实例消费之外，还希望那些具备相同特征的消息都能够被同一个实例进行消费 ，故需要进行消费分区
spring.cloud.stream.bindings.input1.group=consumer-002
spring.cloud.stream.bindings.input1.destination=greetings
##通过该参数开启消费者分区功能
spring.cloud.stream.bindings.input1.consumer.partitioned=true
##该参数指定了当前消费者的总实例数量
spring.cloud.stream.instanceCount=2
##参数设置当前实例的索引号，从0开始，最大值为spring.cloud.stream.instanceCount参数 -1。
##我们试验的时候需要启动多个实例，可以通过运行参数来为不同实例设置不同的索引值。
spring.cloud.stream.instanceIndex=1